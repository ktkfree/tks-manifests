---
# Source: tks-info/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tks-info
  labels:
    helm.sh/chart: tks-info-0.1.0
    app.kubernetes.io/service: tks
    app.kubernetes.io/name: tks-info
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: tks-info/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: tks-info
  namespace: tks
  labels:
    helm.sh/chart: tks-info-0.1.0
    app.kubernetes.io/service: tks
    app.kubernetes.io/name: tks-info
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 9110
      targetPort: 9110
      protocol: TCP
  selector:
    app.kubernetes.io/service: tks
    app.kubernetes.io/name: tks-info
---
# Source: tks-info/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tks-info
  namespace: tks
  labels:
    helm.sh/chart: tks-info-0.1.0
    app.kubernetes.io/service: tks
    app.kubernetes.io/name: tks-info
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/service: tks
      app.kubernetes.io/name: tks-info
  template:
    metadata:
      labels:
        app.kubernetes.io/service: tks
        app.kubernetes.io/name: tks-info
    spec:
      serviceAccountName: tks-info
      securityContext:
        {}
      containers:
        - name: tks-info
          securityContext:
            {}
          image: "docker.io/sktcloud/tks-info:latest"
          imagePullPolicy: Always
          ports:
            - name: tks-info
              containerPort: 9110
              protocol: TCP
          command:
            - /app/server
          args: [
            "-contract-address", "tks-contract.tks.svc",
            "-contract-port", "9110",
            "-dbhost", "postgresql.decapod-db.svc",
            "-port", "9110",
            "-dbhost", "postgresql.decapod-db.svc",
            "-dbport", "5432",
            "-dbuser", "tksuser",
            "-dbpassword", "tkspassword"
          ]
          resources:
            {}
---
# Source: tks-info/templates/pre-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: tks-info
  namespace: tks
  labels:
    helm.sh/chart: tks-info-0.1.0
    app.kubernetes.io/service: tks
    app.kubernetes.io/name: tks-info
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: tks-info
    spec:
      restartPolicy: Never
      containers:
      - name: pre-install-job
        image: "bitnami/postgresql:11.12.0-debian-10-r44"
        env:
        - name: DB_ADMIN_USER
          value: postgres
        - name: PGPASSWORD
          value: tacopassword
        - name: DB_NAME
          value: tks
        - name: DB_USER
          value: tksuser
        - name: DB_PASSWORD
          value: tkspassword
        - name: DB_URL
          value: postgresql.decapod-db.svc
        - name: DB_PORT
          value: "5432"
        command:
        - /bin/bash
        - -c
        - -x
        - |
          # check if ${DB_NAME} database already exists.
          psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER} -lqt | cut -d \| -f 1 | grep -qw ${DB_NAME}
          if [[ $? -ne 0 ]]; then
            psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER} -c "CREATE DATABASE ${DB_NAME};"
          fi

          # check if ${DB_USER} user already exists.
          psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER} -tc '\du' | cut -d \| -f 1 | grep -qw ${DB_USER}
          if [[ $? -ne 0 ]]; then
            psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER} -c "create user ${DB_USER} SUPERUSER password '${DB_PASSWORD}';"
          fi

          # check if contracts table in tks database already exists.
          psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER} -d ${DB_NAME} -tc '\dt' | cut -d \| -f 2 | grep -qw csp_infos
          if [[ $? -ne 0 ]]; then
            echo """
              \c ${DB_NAME};
              CREATE TABLE csp_infos
              (
                  id uuid primary key,
                  contract_id uuid,
                  name character varying(50) COLLATE pg_catalog."default",
                  auth character varying(200) COLLATE pg_catalog."default",
                  csp_type integer,
                  updated_at timestamp with time zone,
                  created_at timestamp with time zone
              );
              CREATE TABLE clusters
              (
                  name character varying(50) COLLATE pg_catalog."default",
                  id uuid primary key,
                  contract_id uuid,
                  csp_id uuid,
                  workflow_id character varying(100) COLLATE pg_catalog."default",
                  status integer,
                  status_desc character varying(10000) COLLATE pg_catalog."default",
                  ssh_key_name character varying(50) COLLATE pg_catalog."default",
                  region character varying(50) COLLATE pg_catalog."default",
                  num_of_az integer,
                  machine_type character varying(50) COLLATE pg_catalog."default",
                  min_size_per_az integer,
                  max_size_per_az integer,
                  kubeconfig character varying(1000) COLLATE pg_catalog."default",
                  updated_at timestamp with time zone,
                  created_at timestamp with time zone
              );
              CREATE TABLE application_groups
              (
                  name character varying(50) COLLATE pg_catalog."default",
                  id uuid primary key,
                  type bigint,
                  workflow_id character varying(100) COLLATE pg_catalog."default",
                  status integer,
                  status_desc character varying(10000) COLLATE pg_catalog."default",
                  cluster_id uuid,
                  external_label character varying(50) COLLATE pg_catalog."default",
                  updated_at timestamp with time zone,
                  created_at timestamp with time zone
              );
              CREATE TABLE applications
              (
                  id uuid primary key,
                  type bigint,
                  app_group_id uuid,
                  endpoint character varying(200) COLLATE pg_catalog."default",
                  metadata json,
                  updated_at timestamp with time zone,
                  created_at timestamp with time zone
              );
              CREATE TABLE keycloak_infos
              (
                  id uuid primary key,
                  cluster_id uuid,
                  realm character varying(100) COLLATE pg_catalog."default",
                  client_id character varying(100) COLLATE pg_catalog."default",
                  secret character varying(1000) COLLATE pg_catalog."default",
                  private_key character varying(1000) COLLATE pg_catalog."default",
                  updated_at timestamp with time zone,
                  created_at timestamp with time zone,
                  CONSTRAINT keycloak_infos_ukey UNIQUE (cluster_id, realm, secret)
              );
              
            """ | psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER}
          fi
